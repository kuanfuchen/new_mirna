{"version":3,"file":"js/149.c2ef7109.js","mappings":"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","sources":["webpack://new_mirna/./src/components/DisplayTable.vue","webpack://new_mirna/./src/components/DisplayTable.vue?b288","webpack://new_mirna/./src/components/MiRNATabs.vue","webpack://new_mirna/./src/components/MiRNATabs.vue?291c","webpack://new_mirna/./src/views/ReadPage.vue","webpack://new_mirna/./src/views/ReadPage.vue?04c2"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"d-flex justify-space-between mb-2\">\r\n      <div class=\"mt-1 d-flex align-center\">\r\n        <div class=\"mr-2\" v-if=\"toggleShowSelect\">\r\n          <v-btn color=\"teal\" density=\"comfortable\" @click=\"selected_display_plot_text\" >\r\n            <v-icon icon=\"fa:fas fa-image\" style=\"font-size: 16px;\"></v-icon>\r\n          </v-btn>\r\n        </div>\r\n        <!-- reseted_display_plot_text -->\r\n        <div class=\"\" v-if=\"toggleShowSelect\">\r\n          <v-btn color=\"primary\" class=\"text-none\" density=\"comfortable\" @click=\"reseted_display_plot_text\" :disabled=\"selectedShow_miRNA.length === 0\">\r\n            Reset\r\n          </v-btn>\r\n        </div>\r\n      </div>\r\n      <div class=\"d-flex align-center\" v-if=\"definedprops.useSearch\">\r\n        <!-- <div class=\"download_xlsx\" @click=\"exportFile\">\r\n          <v-icon icon=\"fa:fas fa-file-excel mr-5\"></v-icon>\r\n        </div> -->\r\n        <v-icon icon=\"fa:fas fa-magnifying-glass mr-3\"></v-icon>\r\n        <v-text-field v-if=\"definedprops.closeSearch !==true\"\r\n          v-model=\"search_RNAname\" variant=\"solo-filled\"\r\n          label=\"MicroRNA ID search\" hide-details style=\"width:300px\"\r\n          single-line density=\"compact\">\r\n        </v-text-field>\r\n      </div>\r\n    </div>\r\n    <v-data-table\r\n      v-model:items-per-page=\"itemsPerPage\" fixed-header :items=\"tableBody\"\r\n      :headers=\"headers\" v-model:search=\"search_RNAname\" item-value=\"Sample name\"\r\n      :height=\"dataTable_height\" :show-select=\"toggleShowSelect\"\r\n      return-object class=\"elevation-1\"\r\n      :custom-filter=\"filterMiRNA\"\r\n      v-model=\"selectedShow_miRNA\">\r\n      <template v-slot:item.Ratio=\"{item}\">\r\n        <div>\r\n          <p :style=\"{ 'color': Number(item.Log2Ratio) >=0 ? '#D32F2F' : '#2962FF' }\">{{ Math.abs(item.Ratio) > 0.001? item.Ratio.toLocaleString('en-US'):item.Ratio }}</p>\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.Log2Ratio=\"{item}\">\r\n        <div>\r\n          <p :style=\"{ 'color': Number(item.Log2Ratio) >=0 ? '#D32F2F' : '#2962FF' }\">{{ Math.abs(item.Log2Ratio) > 0.01? item.Log2Ratio.toLocaleString('en-US'):item.Log2Ratio }}</p>\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.Totalreads=\"{item}\">\r\n        <div>\r\n          {{ item.Totalreads.toLocaleString('en-US') }}\r\n      </div>\r\n      </template>\r\n      <template v-slot:item.Totalalignmentsreads=\"{item}\">\r\n        <div>\r\n          {{ item.Totalalignmentsreads.toLocaleString('en-US') }}\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.Totalunalignedreads=\"{item}\">\r\n        <div>\r\n          {{ item.Totalunalignedreads.toLocaleString('en-US') }}\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.Totalunique=\"{ item }\">\r\n        <div>\r\n          {{  item.Totalunique.toLocaleString('en-US')  }}\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.Foldchange=\"{ item }\">\r\n        <div>\r\n          {{  item.Foldchange.toLocaleString('en-US')  }}\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.lsmean0=\"{ item }\">\r\n        <div>\r\n          {{  item.lsmean0.toLocaleString('en-US')  }}\r\n        </div>\r\n      </template>\r\n      <template v-slot:item.lsmean1=\"{ item }\">\r\n        <div>\r\n          {{  item.lsmean1.toLocaleString('en-US')  }}\r\n        </div>\r\n      </template>\r\n        <!-- <template v-slot:item.Up_Down = \"{item}\">\r\n          <div>\r\n            <p :style=\"{ 'color':item.Up_Down === 'UP'? '#2962FF':'#D32F2F' }\">{{ item.Up_Down }}</p>\r\n          </div>\r\n        </template> -->\r\n    </v-data-table>\r\n  </div>\r\n</template>\r\n<script setup>\r\n  import { ref, onMounted, watch, defineEmits } from 'vue';\r\n  const itemsPerPage = ref(25);\r\n  const definedprops = defineProps (['table','useSearch', 'expresstablestyle']);\r\n  // 'exportName',\r\n  const emits = defineEmits(['select_miRNA_name']);\r\n  // import { dataService } from '../service/data_service.js'; \r\n  const toggleShowSelect = ref(false);\r\n  const selectedShow_miRNA = ref([]);\r\n  const headers = ref([]);\r\n  const tableBody = ref([]);\r\n  const dataTable_height = ref('');\r\n  const search_RNAname = ref('');\r\n  const listenTable = async() => {\r\n    const tableInfo = definedprops.table;\r\n    if(tableInfo.headers.length === 0) return;\r\n    selectedShow_miRNA.value.length = 0;\r\n    let bodyInfo = [];\r\n    if(tableInfo.showCheckBox) toggleShowSelect.value = true;\r\n    for(let j = 0 ; tableInfo.body.length > j ; j++){\r\n      let setLSMeanKeyNumber = -1;\r\n      bodyInfo[j] = [];\r\n      for(let k = 0 ; tableInfo.headers.length > k ; k++){\r\n      // header\r\n      let checkLSMean = -1;\r\n      checkLSMean = tableInfo.headers[k].indexOf('LSMean');\r\n      let headerSplitWord;\r\n      if(checkLSMean > -1) {\r\n        setLSMeanKeyNumber ++;\r\n        headerSplitWord = 'lsmean' + setLSMeanKeyNumber;\r\n      }else{\r\n        headerSplitWord = tableInfo.headers[k].split(/\\s/).join('').trim();\r\n      }\r\n      // setLSMeanKeyNumber = checkLSMean > -1 ?setLSMeanKeyNumber++ : setLSMeanKeyNumber ;\r\n      // const headerSplitWord = tableInfo.headers[k].split(/\\s/).join('').trim();\r\n      if(j === 0){\r\n          // headers.value.push({\r\n          //   title: tableInfo.headers[k],\r\n          //   align:'center',\r\n          //   sortable:true,\r\n          //   key:tableInfo.headers[k],\r\n          // })\r\n        const uppercaseFirst = tableInfo.headers[k].split('');\r\n        const getFirst = uppercaseFirst.splice(0,1);\r\n        const firstcase=getFirst[0].toUpperCase();\r\n        const combinedTitle = firstcase+ uppercaseFirst.join('');\r\n        headers.value.push({\r\n          // title: tableInfo.headers[k],\r\n          title:combinedTitle,\r\n          align: 'center',\r\n          sortable: true,\r\n          key: checkLSMean === -1 ? headerSplitWord : 'lsmean' + setLSMeanKeyNumber, \r\n          // key: headerSplitWord\r\n        })\r\n      }\r\n      if(!bodyInfo[j][headerSplitWord]){\r\n        bodyInfo[j][headerSplitWord] = tableInfo.body[j][k];\r\n      }\r\n      }\r\n    }\r\n    for(let i = 0; headers.value.length > i ; i++){\r\n      if(headers.value[i].key === 'condition'){\r\n        bodyInfo =  bodyInfo.sort((a, b)=>{\r\n          const conditionA = a['condition'].toLowerCase();\r\n          const conditionB = b['condition'].toLowerCase();\r\n          if(conditionA < conditionB){ return -1 }\r\n        });\r\n      }\r\n    }\r\n    for(let i = 0 ; bodyInfo.length > i ; i++){\r\n      const bodyInfoKeys = Object.keys(bodyInfo[i]);\r\n      for( let j = 0 ; bodyInfoKeys.length > j ; j++ ){\r\n        if(bodyInfoKeys[j] !== 'Samplename' && bodyInfoKeys[j] !== 'condition' && bodyInfoKeys[j] !== 'microRNAID' && bodyInfoKeys[j]!== 'Up_Down' && bodyInfoKeys[j] !== 'significant'\r\n          && bodyInfoKeys[j] !== 'Log2Ratio' && bodyInfoKeys[j] !== \"Ratio\"){\r\n          const [ base, exponent ] = bodyInfo[i][bodyInfoKeys[j]].split('E').map(Number);\r\n          if(exponent !== undefined && exponent !== 0){\r\n            bodyInfo[i][bodyInfoKeys[j]] = Number(bodyInfo[i][bodyInfoKeys[j]]).toExponential(2);\r\n            // bodyInfo[i][bodyInfoKeys[j]] = Number(bodyInfo[i][bodyInfoKeys[j]])\r\n          //   bodyInfo[i][bodyInfoKeys[j]] = Number(`${tempVal}E${exponent}`);\r\n          }else{\r\n            const val = Math.round(Number(base)*100)/100;\r\n            if(val > 0){\r\n              bodyInfo[i][bodyInfoKeys[j]] = val;\r\n            }else{\r\n              const numToExponential= Number(bodyInfo[i][bodyInfoKeys[j]]).toExponential(2);\r\n              // const numToExponential= Number(bodyInfo[i][bodyInfoKeys[j]]);\r\n              if(Number(numToExponential)=== 0){\r\n                bodyInfo[i][bodyInfoKeys[j]] =  0;\r\n              }else{\r\n                bodyInfo[i][bodyInfoKeys[j]] = numToExponential;\r\n              }\r\n              \r\n            }\r\n          };\r\n        }\r\n      }\r\n    }\r\n    if(bodyInfo.length >= 20){\r\n      const windowInnerheight = window.innerHeight;\r\n      const redundant_remove_table_height = typeof definedprops.expresstablestyle === 'number' ? definedprops.expresstablestyle : 0;\r\n      dataTable_height.value =  Math.ceil((windowInnerheight - 330 - redundant_remove_table_height)/ windowInnerheight * 100) + 'vh';\r\n    }\r\n    tableBody.value = bodyInfo;\r\n    \r\n  };\r\n  const selected_display_plot_text = ()=>{\r\n    const miRNANames = [];\r\n    selectedShow_miRNA.value.forEach((item)=>{\r\n      miRNANames.push(item.microRNAID)\r\n    })\r\n    emits('select_miRNA_name', miRNANames);\r\n  }\r\n  const reseted_display_plot_text = ()=>{\r\n    selectedShow_miRNA.value.length = 0;\r\n    emits('select_miRNA_name', []);;\r\n  }\r\n  const filterMiRNA = (val, query, item)=>{\r\n    return val != null && query != null && typeof val === 'string'&& item.columns.microRNAID.indexOf(query) !==-1&& val.toString().toLocaleUpperCase().indexOf(query) !== -1\r\n  }\r\n  watch(definedprops.table,(/*newTble*/)=>{\r\n    headers.value.length = 0;\r\n    tableBody.value.length = 0;\r\n    listenTable();\r\n  })\r\n  onMounted(()=>{\r\n    if(tableBody.value.length > 0)return;\r\n    listenTable()\r\n  })\r\n</script>\r\n<style lang=\"scss\">\r\n  .v-table .v-data-table__th,  .v-table .v-data-table__td{\r\n    font-weight: 600 !important;\r\n  }\r\n  // .download_xlsx{\r\n  //   cursor: pointer;\r\n  // }\r\n</style>","import script from \"./DisplayTable.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./DisplayTable.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./DisplayTable.vue?vue&type=style&index=0&id=6b5e75ce&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <v-card >\r\n    <div class=\"d-flex align-center\">\r\n      <v-tabs v-model=\"miRNATab\" color=\"primary\">\r\n        <v-tab class=\"text-none\" :value=\"tab\" v-for=\"(tab, index) in miRNATabs\" :key=\"index\" @click=\"selectedTable(index)\">{{ tab }}</v-tab>\r\n      </v-tabs>\r\n      <div class=\"download_xlsx ml-auto\" @click=\"exportFile\">\r\n        <v-icon icon=\"fa:fas fa-file-arrow-down\" class=\"mr-5 text-teal\" style=\"font-size: 24px;\"></v-icon>\r\n      </div>\r\n    </div>\r\n    <v-card-text>\r\n      <v-window v-model=\"miRNATab\">\r\n        <v-window-item v-for=\"(tab, index) in miRNATabs\" :key=\"index\" :value=\"tab\">\r\n          <DisplayTable :table=\"tableComponentInfo\" :useSearch=\"false\"></DisplayTable>\r\n          <!-- :exportName=\"props.export_miRNA_Name\" -->\r\n        </v-window-item>\r\n      </v-window>\r\n    </v-card-text>\r\n  </v-card>\r\n</template>\r\n<script setup>\r\n  import { ref } from 'vue';\r\n  import { Subject, takeUntil } from 'rxjs';\r\n  const miRNATabs = ref([]);\r\n  const comSubject$ = new Subject();\r\n  const miRNATab = ref('');\r\n  const miRNATables = ref([]);\r\n  const props = defineProps(['export_miRNA_Name']);\r\n  import { dataService } from '../service/data_service';\r\n  import DisplayTable from '../components/DisplayTable.vue';\r\n  const tableComponentInfo = ref({});\r\n  dataService.transferMeg$.pipe(takeUntil(comSubject$)).subscribe((miRNAInfo) => {\r\n    miRNATabs.value = miRNAInfo.tabs;\r\n    miRNATab.value = miRNAInfo.tabs[0];\r\n    miRNATables.value = miRNAInfo.tabsTable;\r\n    handleTableComponent(miRNAInfo.tabsTable[0]);\r\n  });\r\n  const selectedTable = (index)=>{\r\n    if(index > miRNATables.value.length || index < 0) return;\r\n    handleTableComponent(miRNATables.value[index])\r\n  };\r\n  const handleTableComponent = (tableInfo) => {\r\n    tableComponentInfo.value =  tableInfo;\r\n  };\r\n  const exportFile = ()=>{\r\n    const combinationTable = [];\r\n    const miRNATablesVal = JSON.parse(JSON.stringify(miRNATables.value));\r\n    for(let i = 0 ; miRNATablesVal.length > i ; i++){\r\n      const table = [];\r\n      table.push(miRNATablesVal[i].headers);\r\n      for(let j = 0; miRNATablesVal[i].body.length > j ; j++){\r\n        table.push(miRNATablesVal[i].body[j])\r\n      }\r\n      combinationTable.push(table);\r\n    }\r\n    dataService.exportXlsx(combinationTable, 'readAndAlignment');\r\n  }\r\n</script>\r\n<style lang=\"scss\">\r\n  .download_xlsx{\r\n    cursor: pointer;\r\n  }\r\n</style>","import script from \"./MiRNATabs.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./MiRNATabs.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./MiRNATabs.vue?vue&type=style&index=0&id=37b3e580&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__","<template>\r\n  <div>\r\n    <MiRNATabs class=\"px-2 mt-3\" :export_miRNA_Name=\"tableName\"></MiRNATabs>\r\n  </div>\r\n  \r\n</template>\r\n<script setup>\r\n/* eslint-disable */\r\n  import { Subject, takeUntil, debounceTime } from 'rxjs';\r\n  import { dataService } from '@/service/data_service';\r\n  import MiRNATabs from '../components/MiRNATabs.vue';\r\n  import { ref } from 'vue';\r\n  const tableName = ref('readAndAlignment')\r\n  const comSubject$ = new Subject();\r\n  dataService.ReadAlignmentSubject$.pipe(takeUntil(comSubject$),debounceTime(100)).subscribe((readAlignmentTableInfo) => {\r\n    dataService.transferHandleFinishMeg(readAlignmentTableInfo);\r\n  });\r\n</script>","import script from \"./ReadPage.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./ReadPage.vue?vue&type=script&setup=true&lang=js\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["itemsPerPage","ref","definedprops","__props","emits","__emit","toggleShowSelect","selectedShow_miRNA","headers","tableBody","dataTable_height","search_RNAname","listenTable","async","tableInfo","table","length","value","bodyInfo","showCheckBox","j","body","setLSMeanKeyNumber","k","headerSplitWord","checkLSMean","indexOf","split","join","trim","uppercaseFirst","getFirst","splice","firstcase","toUpperCase","combinedTitle","push","title","align","sortable","key","i","sort","a","b","conditionA","toLowerCase","conditionB","bodyInfoKeys","Object","keys","base","exponent","map","Number","undefined","toExponential","val","Math","round","numToExponential","windowInnerheight","window","innerHeight","redundant_remove_table_height","expresstablestyle","ceil","selected_display_plot_text","miRNANames","forEach","item","microRNAID","reseted_display_plot_text","filterMiRNA","query","columns","toString","toLocaleUpperCase","watch","onMounted","__exports__","miRNATabs","comSubject$","Subject","miRNATab","miRNATables","tableComponentInfo","dataService","transferMeg$","pipe","takeUntil","subscribe","miRNAInfo","tabs","tabsTable","handleTableComponent","selectedTable","index","exportFile","combinationTable","miRNATablesVal","JSON","parse","stringify","exportXlsx","tableName","ReadAlignmentSubject$","debounceTime","readAlignmentTableInfo","transferHandleFinishMeg"],"sourceRoot":""}